name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PYTHONPATH: ${{ github.workspace }}/src
  AWS_ACCOUNT_ID: 598791268315
  AWS_REGION: us-west-1
  ECR_REPOSITORY: thoughtful-coding/backend

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: "requirements.txt"

      - name: Display Python version
        run: python3 -V

      - name: Install Black
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install black

      - name: Run Black formatter check
        run: python3 -m black --line-length 120 --check .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: "requirements.txt"

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
          python3 -m pip install pytest-cov

      - name: Run tests with coverage
        run: python3 -m pytest --cov=thoughtful_backend --cov-report term --cov-report=xml:coverage.xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
        continue-on-error: true

  deploy:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      id-token: write
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::598791268315:role/GitHubActionsECRRole
          aws-region: us-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image tag
        id: vars
        run: echo "short_sha=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT

      - name: Build Docker image with caching
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.vars.outputs.short_sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:prod
          cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:buildcache
          cache-to: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:buildcache,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.vars.outputs.short_sha }}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: "0"

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Push Docker image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.vars.outputs.short_sha }}
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:prod

    outputs:
      image_tag: ${{ steps.vars.outputs.short_sha }}

  trigger-infra:
    name: Trigger Infrastructure Pipeline
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Trigger Infrastructure Update
        env:
          IMAGE_TAG: ${{ needs.deploy.outputs.image_tag }}
        run: |
          if [ -z "${IMAGE_TAG}" ]; then
            echo "Error: IMAGE_TAG is not defined. Cannot trigger infra pipeline."
            exit 1
          fi

          echo "Triggering infrastructure pipeline for main branch with IMAGE_TAG=${IMAGE_TAG}"

          # If infrastructure moved to GitHub (repository_dispatch)
          if [ -n "${{ secrets.INFRA_REPO_TOKEN }}" ]; then
            curl --request POST \
                 --fail \
                 --url "https://api.github.com/repos/${{ secrets.INFRA_REPO_OWNER }}/${{ secrets.INFRA_REPO_NAME }}/dispatches" \
                 --header "Accept: application/vnd.github.v3+json" \
                 --header "Authorization: Bearer ${{ secrets.INFRA_REPO_TOKEN }}" \
                 --data "{\"event_type\":\"deploy\",\"client_payload\":{\"image_tag\":\"${IMAGE_TAG}\"}}"
            echo "GitHub infrastructure workflow triggered successfully"
          fi
